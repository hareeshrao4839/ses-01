gcloud compute instances delete   <vm-name> \
--project=<project-ID> --zone=<zone> \


for try in {1..200} ; do
    curl -s -o /dev/null -w "%{http_code}" http://<ip>
done


curl -s -o /dev/null -w "%{http_code}" http://<ip>

kubectl create deployment ngi-x --image=nginx:latest
kubectl create po ngi-x --image=nginx:latest


kubectl get configmap ng1-conf -n default -o yaml
kubectl get configmap ng-conf -n default -o yaml
kubectl create namespace <namespace_Name>
kubectl describe ns <namespace_Name>
kubectl describe deployment <deployment_Name>
kubectl get ns <namespace_Name> -o yaml
kubectl get deployment <deployment_Name> -o yaml

kubectl get configmaps
kubectl apply -f /ses-01/k8s/deployment/d1-cm.yaml
kubectl delete <object-type> <object-name> 
kubectl apply -f /ses-01/k8s/deployment/d1-cm.yaml
kubectl apply -f /ses-01/k8s/deployment/d1-cm.yaml
kubectl get po
kubectl exec -it ngx-d-6d68f98584-zc4v9 bash
kubectl exec -it ngx-d-6d68f98584-zc4v9 sh
kubectl exec -it ngx-d-6d68f98584-zc4v9 -n default sh
kubectl exec -it ngx-d-6d68f98584-zc4v9 -n default bash
kubectl exec -it ngx-d-6d68f98584-zc4v9 -n default -- ls /etc/config
kubectl exec -it ngx-d-6d68f98584-zc4v9 -n default -- ls -al /etc/config
kubectl exec -it ngx-d-6d68f98584-zc4v9 -n default -- cat /etc/config/a2.conf
kubectl create configmap ng-conf --from-file=ses-01/k8s/configmap/a1.conf

1653  kubectl create secret generic my-sec --from-file=a1.conf
 1654  kubectl delete secret my-sec
 1655  kubectl create secret generic my-sec --from-file=a1.conf
 1656  kubectl get secret my-sec  -o yaml
 1657  kubectl delete secret my-sec
 1658  kubectl create secret generic my-sec --from-file=a1.conf
 1659  kubectl get secret my-sec  -o yaml
 1660  kubectl edit secret my-sec
 1661  kubectl create secret generic --from-literal=pass=aaahhhhh
 1662  kubectl create secret generic my-sec1 --from-literal=pass=aaahhhhh
 1663  kubectl create secret tls my-sec3 --client-key=example.com.key --client-certificate=example.com.crt
 1664  kubectl create secret tls my-sec3 --client-key=./example.com.key --client-certificate=./example.com.crt
 1665  kubectl create secret tls my-sec3 --key=example.com.key --cert=example.com.crt
 1666  kubectl get secrets
 1667  kubectl get secret my-sec3 -o yaml
 1668  kubectl get secret my-sec1  -o yaml
  1671  kubectl get secret my-sec1  -o yaml
 1672  kubectl apply -f /Users/ragnar/Desktop/mystuff/k8s/TNG_RnD/TNG_CICD/ses-01/k8s/deployment/d1-secrets.yaml
 1673  kubectl get po
 1674  kubectl exec -it ngx-d-94dfbc67b-nrfpp -- ls -al /etc/dat1
 1675  kubectl apply -f /Users/ragnar/Desktop/mystuff/k8s/TNG_RnD/TNG_CICD/ses-01/k8s/deployment/d1-secrets.yaml
 1676  kubectl get po
 1677  kubectl get po
 1678  kubectl exec -it ngx-d-76499fdbcc-8bqkv -- ls -al /etc/dat1
 1679  kubectl exec -it ngx-d-76499fdbcc-8bqkv -- ls -al /etc/certs
 1680  kubectl exec -it ngx-d-76499fdbcc-8bqkv -- echo $pass
 1681  kubectl exec -it ngx-d-76499fdbcc-8bqkv -- env


java installation 
sudo apt install openjdk-* default-jre gnupg2 apt-transport-https wget -y
ls -al /usr/lib/jvm/        // check what version java installed 
java --version 


maven install
apt install maven
ls -al /usr/share/maven 
mvn -v


sonar-scanner installation 
cd /opt/
ls
wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
unzip sonar-scanner-cli-4.8.0.2856-linux.zip

mv sonar-scanner-4.8.0.2856-linux sonar-scanner
ls
rm -rf sonar-scanner-cli-4.8.0.2856-linux.zip
ls
ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner


home variable/path set 
vim ~/.bashrc
below lines should be added in ~/.bashrc

export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
export M2_HOME=/usr/share/maven
export PATH=${JAVA_HOME}/bin:${M2_HOME}/bin:/opt/sonar-scanner/bin:$PATH


jenkins installation ( if its debian) =or follow this https://www.jenkins.io/doc/book/installing/linux/

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins


sonarqube : run via docker composer 
cd ses-01/sonar/dkr-compose
docker compose up > /dev/null 2>&1 &

docker compose stop

docker install : follow ref for debian https://docs.docker.com/engine/install/debian/
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin






  /usr/share/maven/bin


  /usr/lib/jvm/java-17-openjdk-amd64